#ifndef _CALGOLIB_MATH
#define _CALGOLIB_MATH

#include "io"

namespace cal {

template <typename T>
T abs(T x) {
	return x >= 0 ? x : -x;
}

template <typename T>
T sqr(T x) {
	return x * x;
}

template <int mod = 1000000007>
struct mod_int {
	long long value;

	mod_int() : value(0) {}
	
	//This ctor assumes that value is a valid integer in range [0, mod)
	mod_int(int value) : value(value) {}
	mod_int(const mod_int& other) : value(other.value) {}

	mod_int& operator++() {
		value++;
		value %= mod;

		return *this;
	}

	mod_int& operator--() {
		value--;
		if (value < 0) {
			value += mod;
		}

		return *this;
	}

	mod_int operator++(int) {
		mod_int copy = *this;

		value++;
		value %= mod;

		return copy;
	}

	mod_int operator--(int) {
		mod_int copy = *this;

		value--;
		if (value < 0) {
			value += mod;
		}

		return copy;
	}

	mod_int operator*(mod_int other) {
		return mod_int((value * other.value) % mod);
	}

	mod_int operator+(mod_int other) {
		return mod_int((value + other.value) % mod);
	}

	mod_int operator-(mod_int other) {
		long long result = value - other.value;
		if (result < 0) {
			result += mod;
		}

		return mod_int(result);
	}

	bool operator==(mod_int other) {
		return value == other.value;
	}

	bool operator!=(mod_int other) {
		return value != other.value;
	}

	mod_int& operator=(mod_int other) {
		value = other.value;
		return *this;
	}

	void operator+=(mod_int other) {
		*this = *this + other;
	}

	void operator-=(mod_int other) {
		*this = *this - other;
	}

	void operator*=(mod_int other) {
		*this = *this * other;
	}
};

template <int mod>
void write(mod_int<mod> x) {
	write(x.value);
}

};

#endif